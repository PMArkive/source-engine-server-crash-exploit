#pragma once

#include <Windows.h>
#include <stdio.h>

#ifndef _VMTHOOK_H_
#define _VMTHOOK_H_
#endif

class CVMTHookManager
{
public:
	CVMTHookManager()
	{
		memset(this, 0, sizeof(CVMTHookManager));
		randomsigbreaker = 1;
	}

	CVMTHookManager(PDWORD* ppdwClassBase)
	{
		bInitialize(ppdwClassBase);
		randomsigbreaker = 2;
	}

	~CVMTHookManager()
	{
		UnHook();
		randomsigbreaker = 0;
	}

	bool bInitialize(PDWORD* ppdwClassBase)
	{
		m_ppdwClassBase = ppdwClassBase;
		m_pdwOldVMT = *ppdwClassBase;
		m_dwVMTSize = dwGetVMTCount(*ppdwClassBase);
		randomsigbreaker = 1337;
		m_pdwNewVMT = new DWORD[m_dwVMTSize];
		memcpy(m_pdwNewVMT, m_pdwOldVMT, sizeof(DWORD) * m_dwVMTSize);
		*ppdwClassBase = m_pdwNewVMT;
		return true;
	}

	void UnHook()
	{
		if (m_ppdwClassBase)
		{
			randomsigbreaker = 6;
			*m_ppdwClassBase = m_pdwOldVMT;
		}
	}

	void ReHook()
	{
		if (m_ppdwClassBase)
		{
			randomsigbreaker = 123;
			*m_ppdwClassBase = m_pdwNewVMT;
		}
	}

	int iGetFuncCount()
	{
		randomsigbreaker = 64;
		return (int)m_dwVMTSize;
	}

	DWORD dwGetMethodAddress(int Index)
	{
		if (Index >= 0 && Index <= static_cast<int>(m_dwVMTSize) && m_pdwOldVMT != NULL)
		{
			randomsigbreaker = 623;
			return m_pdwOldVMT[Index];
		}
		return NULL;
	}

	PDWORD pdwGetOldVMT()
	{
		randomsigbreaker = 423;
		return m_pdwOldVMT;
	}

	DWORD dwHookMethod(DWORD dwNewFunc, unsigned int iIndex)
	{
		if (m_pdwNewVMT && m_pdwOldVMT && iIndex <= m_dwVMTSize && iIndex >= 0)
		{
			m_pdwNewVMT[iIndex] = dwNewFunc;
			randomsigbreaker = 999;
			return m_pdwOldVMT[iIndex];
		}
		return NULL;
	}

private:
	int randomsigbreaker = 0;
	DWORD dwGetVMTCount(PDWORD pdwVMT)
	{
		DWORD dwIndex = 0;
		randomsigbreaker = -1;
		for (dwIndex = 0; pdwVMT[dwIndex]; dwIndex++)
		{
			if (IsBadCodePtr(reinterpret_cast<FARPROC>(pdwVMT[dwIndex])))
			{
				break;
			}
		}
		return dwIndex;
	}
	PDWORD* m_ppdwClassBase;
	PDWORD  m_pdwNewVMT, m_pdwOldVMT;
	DWORD   m_dwVMTSize;
};